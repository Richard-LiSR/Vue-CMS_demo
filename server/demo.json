<ref *2> ServerResponse {
  _events: [Object: null prototype
  ] {
    finish: [
      [Function: bound resOnFinish
      ],
      [Function: onevent
      ]
    ],
    end: [Function: onevent
    ]
  },
  _eventsCount: 2,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  _closed: false,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0
      },
      length: 0,
      pipes: [],
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      constructed: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)
      ]: false
    },
    _events: [Object: null prototype
    ] {
      end: [Array
      ],
      timeout: [Function: socketOnTimeout
      ],
      data: [Function: bound socketOnData
      ],
      error: [Array
      ],
      close: [Array
      ],
      drain: [Function: bound socketOnDrain
      ],
      resume: [Function: onSocketResume
      ],
      pause: [Function: onSocketPause
      ]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite
      ],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)
      ]: []
    },
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype
      ],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP
      ],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6: : : : 3000',
      [Symbol(IncomingMessage)
      ]: [Function: IncomingMessage
      ],
      [Symbol(ServerResponse)
      ]: [Function: ServerResponse
      ],
      [Symbol(kCapture)
      ]: false,
      [Symbol(async_id_symbol)
      ]: 515
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      _events: [Object: null prototype
      ],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP
      ],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 0,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      requestTimeout: 0,
      _connectionKey: '6: : : : 3000',
      [Symbol(IncomingMessage)
      ]: [Function: IncomingMessage
      ],
      [Symbol(ServerResponse)
      ]: [Function: ServerResponse
      ],
      [Symbol(kCapture)
      ]: false,
      [Symbol(async_id_symbol)
      ]: 515
    },
    parser: HTTPParser {
      '0': [Function: bound setRequestTimeout
      ],
      '1': [Function: parserOnHeaders
      ],
      '2': [Function: parserOnHeadersComplete
      ],
      '3': [Function: parserOnBody
      ],
      '4': [Function: parserOnMessageComplete
      ],
      '5': [Function: bound onParserExecute
      ],
      '6': [Function: bound onParserTimeout
      ],
      _headers: [],
      _url: '',
      socket: [Circular *1
      ],
      incoming: [IncomingMessage
      ],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming
      ],
      [Symbol(resource_symbol)
      ]: [HTTPServerAsyncResource
      ]
    },
    on: [Function: socketListenerWrap
    ],
    addListener: [Function: socketListenerWrap
    ],
    prependListener: [Function: socketListenerWrap
    ],
    setEncoding: [Function: socketSetEncoding
    ],
    _paused: false,
    _httpMessage: [Circular *2
    ],
    timeout: 0,
    _peername: { address: ': : 1', family: 'IPv6', port: 49956
    },
    [Symbol(async_id_symbol)
    ]: 814,
    [Symbol(kHandle)
    ]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)
      ]: [Circular *1
      ]
    },
    [Symbol(kSetNoDelay)
    ]: false,
    [Symbol(lastWriteQueueSize)
    ]: 0,
    [Symbol(timeout)
    ]: Timeout {
      _idleTimeout: -1,
      _idlePrev: null,
      _idleNext: null,
      _idleStart: 28144,
      _onTimeout: null,
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: true,
      [Symbol(refed)
      ]: false,
      [Symbol(kHasPrimitive)
      ]: false,
      [Symbol(asyncId)
      ]: 868,
      [Symbol(triggerId)
      ]: 865
    },
    [Symbol(kBuffer)
    ]: null,
    [Symbol(kBufferCb)
    ]: null,
    [Symbol(kBufferGen)
    ]: null,
    [Symbol(kCapture)
    ]: false,
    [Symbol(kBytesRead)
    ]: 0,
    [Symbol(kBytesWritten)
    ]: 0,
    [Symbol(RequestTimeout)
    ]: undefined
  },
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData
  ],
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0
      },
      length: 0,
      pipes: [],
      flowing: null,
      ended: true,
      endEmitted: false,
      reading: false,
      constructed: true,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      destroyed: false,
      errored: null,
      closed: false,
      closeEmitted: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)
      ]: null
    },
    _events: [Object: null prototype
    ] { end: [Function: clearRequestTimeout
      ]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState
      ],
      _events: [Object: null prototype
      ],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState
      ],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server
      ],
      _server: [Server
      ],
      parser: [HTTPParser
      ],
      on: [Function: socketListenerWrap
      ],
      addListener: [Function: socketListenerWrap
      ],
      prependListener: [Function: socketListenerWrap
      ],
      setEncoding: [Function: socketSetEncoding
      ],
      _paused: false,
      _httpMessage: [Circular *2
      ],
      timeout: 0,
      _peername: [Object
      ],
      [Symbol(async_id_symbol)
      ]: 814,
      [Symbol(kHandle)
      ]: [TCP
      ],
      [Symbol(kSetNoDelay)
      ]: false,
      [Symbol(lastWriteQueueSize)
      ]: 0,
      [Symbol(timeout)
      ]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 28144,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)
        ]: false,
        [Symbol(kHasPrimitive)
        ]: false,
        [Symbol(asyncId)
        ]: 868,
        [Symbol(triggerId)
        ]: 865
      },
      [Symbol(kBuffer)
      ]: null,
      [Symbol(kBufferCb)
      ]: null,
      [Symbol(kBufferGen)
      ]: null,
      [Symbol(kCapture)
      ]: false,
      [Symbol(kBytesRead)
      ]: 0,
      [Symbol(kBytesWritten)
      ]: 0,
      [Symbol(RequestTimeout)
      ]: undefined
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: true,
    rawHeaders: [
      'Host',
      'localhost: 3000',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="95",
      "Chromium";v="95",
      ";Not A Brand";v="99"',
      'Accept',
      'application/json, text/plain, * /*',
      'Authorization',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxNzIzZmU2YTdjZmZlNTUwYTNmODAyYSIsImlhdCI6MTYzNTI5NjA2Mn0.C2KP7M9hcJMVDmHSfYnn5F7dhSx5G5Q2TUNNGsurPO4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost:8080',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost:8080/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'zh-CN,zh;q=0.9'
    ],
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/updateSpuserlist',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *2],
      timeout: 0,
      _peername: [Object],
      [Symbol(async_id_symbol)]: 814,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: -1,
        _idlePrev: null,
        _idleNext: null,
        _idleStart: 28144,
        _onTimeout: null,
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: true,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 868,
        [Symbol(triggerId)]: 865
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(RequestTimeout)]: undefined
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '/api',
    originalUrl: '/api/updateSpuserlist',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/updateSpuserlist',
      path: '/updateSpuserlist',
      href: '/updateSpuserlist',
      _raw: '/updateSpuserlist'
    },
    params: {},
    query: {},
    res: [Circular *2],
    _parsedOriginalUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/api/updateSpuserlist',
      path: '/api/updateSpuserlist',
      href: '/api/updateSpuserlist',
      _raw: '/api/updateSpuserlist'
    },
    sessionStore: MemoryStore {
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      sessions: [Object: null prototype],
      generate: [Function (anonymous)],
      [Symbol(kCapture)]: false
    },
    sessionID: 'k3EZCyKwDPpP9tw-Dilwin-b3R_PCx88',
    session: Session { cookie: [Object] },
    route: Route {
      path: '/updateSpuserlist',
      stack: [Array],
      methods: [Object]
    },
    _startAt: [ 2032, 643536400 ],
    _startTime: 2021-10-27T01:14:31.574Z,
    _remoteAddress: '::1',
    body: {},
    secret: undefined,
    cookies: [Object: null prototype] {},
    signedCookies: [Object: null prototype] {},
    [Symbol(kCapture)]: false,
    [Symbol(kHeaders)]: {
      host: 'localhost:3000',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="95", "Chromium";v="95", ";Not A Brand";v="99"',
      accept: 'application/json, text/plain, */*',
      authorization: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYxNzIzZmU2YTdjZmZlNTUwYTNmODAyYSIsImlhdCI6MTYzNTI5NjA2Mn0.C2KP7M9hcJMVDmHSfYnn5F7dhSx5G5Q2TUNNGsurPO4',    
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http: //localhost:8080',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http: //localhost:8080/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'zh-CN,zh;q=0.9'
    },
    [Symbol(kHeadersCount)
    ]: 30,
    [Symbol(kTrailers)
    ]: null,
    [Symbol(kTrailersCount)
    ]: 0,
    [Symbol(RequestTimeout)
    ]: undefined
  },
  _sent100: false,
  _expect_continue: false,
  locals: [Object: null prototype
  ] {},
  writeHead: [Function: writeHead
  ],
  end: [Function: end
  ],
  _startAt: undefined,
  _startTime: undefined,
  __onFinished: [Function: listener
  ] { queue: [
      [Function: logRequest
      ]
    ]
  },
  [Symbol(kCapture)
  ]: false,
  [Symbol(kNeedDrain)
  ]: false,
  [Symbol(corked)
  ]: 0,
  [Symbol(kOutHeaders)
  ]: [Object: null prototype
  ] {
    'x-powered-by': [ 'X-Powered-By', ' 3.2.1'
    ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*'
    ],
    'access-control-allow-headers': [
      'Access-Control-Allow-Headers',
      'Content-Type,Content-Length, Authorization, Accept,X-Requested-With'
    ],
    'content-type': [ 'Content-Type', 'application/json;charset=utf-8'
    ],
    'access-control-allow-methods': [ 'Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS'
    ]
  }
}